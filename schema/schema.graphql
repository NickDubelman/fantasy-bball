scalar Time

type User {
  id: ID!
  name: String!
  email: String!

  joined: Time
  lastActive: Time

  leagues: LeagueConnection!
}

# A League is a collection of Users who can participate in daily Contests
type League {
  id: ID!
  name: String!
  description: String!
  maxMembers: Int!

  statWeights: StatWeights!
  members: LeagueMemberConnection!

  currentContests: ContestConnection!
  previousContests: ContestConnection!
}

# StatWeights are multipliers for the various stats
type StatWeights {
  points: Int!
  rebounds: Int!
  assists: Int!
  steals: Int!
  blocks: Int!
  turnovers: Int!
}

# Contest is an instance of a daily competition for a specific League
type Contest {
  id: ID!
  day: Time!
  league: League!
  winner: User
  draft: ContestDraft!

  entries: ContestEntryConnection!
}

# ContestDraft is the draft details for a specific Contest
type ContestDraft {
  id: ID!
  picks: [ContestDraftPick!]!
}

# ContestDraftPick specifies the Player that a User picked in a round of a Draft
type ContestDraftPick {
  draft: ContestDraft!
  user: User!
  round: Int!
  player: Player
}

# ContestEntry is a specific User's entry to a Contest. The entry contains the
# players the user has selected
type ContestEntry {
  id: ID!
  user: User!
  contest: Contest!

  totalPoints: Int!
  players: [PlayerPerformance!]!
}

# Player is an NBA player, like Alex Caruso
type Player {
  id: ID!
  name: String!

  recentGames: GameConnection!

  team: Team # player might not have a team
}

# Team is an NBA team, like the Los Angeles Lakers
type Team {
  id: ID!
  shortName: String!
  location: String!
  name: String!

  recentGames: GameConnection!
  upcomingGames: GameConnection!

  players: [Player!]!
}

# Game is an NBA game
type Game {
  id: ID!
  time: Time!
  homeTeam: Team!
  awayTeam: Team!

  # COVID necessitates this field, unfortunately
  postponed: Boolean!

  result: GameResult!
}

# GameResult contains info about the result of a Game
type GameResult {
  id: ID!
  winner: Team

  homeTeamPerformances: [PlayerPerformance!]!
  awayTeamPerformances: [PlayerPerformance!]!
}

# PlayerPerformance contains info about how a Player performed in a specific Game
type PlayerPerformance {
  id: ID!
  player: Player!
  game: Game!

  # Just track the basic stats for now
  points: Int!
  rebounds: Int!
  assists: Int!
  steals: Int!
  blocks: Int!
  turnovers: Int!
}

# PageInfo contains generic pagination info mandated by the Relay connection spec
type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

# Connections

type LeagueConnection {
  pageInfo: PageInfo!
  edges: [LeagueEdge!]!
}

type LeagueEdge {
  cursor: String!
  node: League!
}

type LeagueMemberConnection {
  pageInfo: PageInfo!
  edges: [LeagueMemberEdge!]!
}

type LeagueMemberEdge {
  cursor: String!
  node: User!

  # edge fields
  isCommissioner: Boolean!
  canInvite: Boolean!
}

type GameConnection {
  pageInfo: PageInfo!
  edges: [GameEdge!]!
}

type GameEdge {
  cursor: String!
  node: Game!
}

type ContestConnection {
  pageInfo: PageInfo!
  edges: [ContestEdge!]!
}

type ContestEdge {
  cursor: String!
  node: Contest!
}

type ContestEntryConnection {
  pageInfo: PageInfo!
  edges: [ContestEntryEdge!]!
}

type ContestEntryEdge {
  cursor: String!
  node: ContestEntry!
}
